name: ðŸŒˆ All Builds
on:
  push:
    branches: [ godot-4.x ]
    tags:
      - "v2*"
  pull_request:
    branches: "*"

# Global Settings
env:
  PROJECT_FOLDER: fmod-gdnative
  TARGET_PATH: demo/addons/fmod/libs/
  TARGET_NAME: libGodotFmod
  TARGET: editor
  GODOT_VERSION: 4.0
  FMOD_VERSION: 20212

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows Compilation
            os: "windows-2022"
            artifact-name: windows
            artifact-extension: dll
            additional-python-packages: pywin32
            fmod-executable-suffix: win-installer.exe

          - name: Ubuntu Compilation
            os: "ubuntu-20.04"
            artifact-name: linux
            artifact-extension: so
            fmod-executable-suffix: linux.tar.gz

          - name: MacOS Compilation
            os: "macos-11"
            artifact-name: macos
            artifact-extension: framework
            fmod-executable-suffix: osx.dmg

          - name: Android Compilation
            os: "ubuntu-20.04"
            artifact-name: android
            artifact-extension: so
            fmod-executable-suffix: android.tar.gz
            flags: ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME arch=arm64

          - name: iOS Compilation
            os: "macos-11"
            artifact-name: ios
            artifact-extension: dylib
            fmod-executable-suffix: ios.dmg
            flags: arch=arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: recursive

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons requests ${{ matrix.additional-python-packages }}
          python --version
          scons --version

      - name : Installing FMOD on Windows
        if: runner.os == 'Windows'
        run: |
          cd ..
          New-Item -ItemType directory -Path libs; cd libs
          New-Item -ItemType directory -Path fmod; cd fmod
          python ../../${{env.PROJECT_FOLDER}}/get_fmod.py ${{secrets.FMODUSER}} ${{secrets.FMODPASS}} ${{matrix.artifact-name}} ${{env.FMOD_VERSION}}
          7z x fmodstudioapi${{env.FMOD_VERSION}}${{matrix.fmod-executable-suffix}}
          mv api/ windows
          cd ../../

      - name : Installing FMOD on Linux & Android
        if: runner.os == 'Linux'
        run: |
          cd ..
          mkdir libs && cd libs
          mkdir fmod && cd fmod
          python ../../${{env.PROJECT_FOLDER}}/get_fmod.py ${{secrets.FMODUSER}} ${{secrets.FMODPASS}} ${{matrix.artifact-name}} ${{env.FMOD_VERSION}}
          tar -xvf fmodstudioapi${{env.FMOD_VERSION}}${{matrix.fmod-executable-suffix}}
          mv fmodstudioapi${{env.FMOD_VERSION}}${{matrix.artifact-name}}/api ${{matrix.artifact-name}}
          cd ../../

      - name : Installing FMOD on MacOS & iOS
        if: runner.os == 'MacOS'
        run: |
          cd ..
          mkdir libs && cd libs
          mkdir fmod && cd fmod
          python ../../${{env.PROJECT_FOLDER}}/get_fmod.py ${{secrets.FMODUSER}} ${{secrets.FMODPASS}} ${{matrix.artifact-name}} ${{env.FMOD_VERSION}}
          hdiutil attach fmodstudioapi${{env.FMOD_VERSION}}${{matrix.fmod-executable-suffix}}
          [[ ${{matrix.artifact-name}} = "macos" ]] && cp -r "/Volumes/FMOD Programmers API Mac/FMOD Programmers API/api" osx
          [[ ${{matrix.artifact-name}} = "ios" ]] && cp -r "/Volumes/FMOD Programmers API iOS/FMOD Programmers API/api" ios
          cd ../../

      - name: Compilation
        run: |
          cd ../${{env.PROJECT_FOLDER}}
          scons platform=${{ matrix.artifact-name }} generate_bindings=yes target=${{ env.TARGET }} target_path=${{ env.TARGET_PATH }} target_name=${{ env.TARGET_NAME }} -j1 ${{ matrix.flags }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ env.TARGET_PATH }}${{ matrix.artifact-name }}/*.${{ matrix.artifact-extension }}
          if-no-files-found: error